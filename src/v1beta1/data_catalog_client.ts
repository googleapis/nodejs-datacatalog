// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './data_catalog_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Data Catalog API service allows clients to discover, understand, and manage
 *  their data.
 * @class
 * @memberof v1beta1
 */
export class DataCatalogClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  dataCatalogStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DataCatalogClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof DataCatalogClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof DataCatalogClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      entryPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}'
      ),
      entryGroupPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}'
      ),
      locationPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      policyTagPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/taxonomies/{taxonomy}/policyTags/{policy_tag}'
      ),
      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),
      tagPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}/tags/{tag}'
      ),
      tagTemplatePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tagTemplates/{tag_template}'
      ),
      tagTemplateFieldPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tagTemplates/{tag_template}/fields/{field}'
      ),
      taxonomyPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/taxonomies/{taxonomy}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      searchCatalog: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'results'
      ),
      listEntryGroups: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entryGroups'
      ),
      listEntries: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entries'
      ),
      listTags: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tags'
      ),
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.cloud.datacatalog.v1beta1.DataCatalog',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.datacatalog.v1beta1.DataCatalog.
    this.dataCatalogStub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.cloud.datacatalog.v1beta1.DataCatalog'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.cloud.datacatalog.v1beta1.DataCatalog,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dataCatalogStubMethods = [
      'searchCatalog',
      'createEntryGroup',
      'updateEntryGroup',
      'getEntryGroup',
      'deleteEntryGroup',
      'listEntryGroups',
      'createEntry',
      'updateEntry',
      'deleteEntry',
      'getEntry',
      'lookupEntry',
      'listEntries',
      'createTagTemplate',
      'getTagTemplate',
      'updateTagTemplate',
      'deleteTagTemplate',
      'createTagTemplateField',
      'updateTagTemplateField',
      'renameTagTemplateField',
      'deleteTagTemplateField',
      'createTag',
      'updateTag',
      'deleteTag',
      'listTags',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
    ];

    for (const methodName of dataCatalogStubMethods) {
      const innerCallPromise = this.dataCatalogStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'datacatalog.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'datacatalog.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates an EntryGroup.
   *
   * An entry group contains logically related entries together with Cloud
   * Identity and Access Management policies that specify the users who can
   * create, edit, and view entries within the entry group.
   *
   * Data Catalog automatically creates an entry group for BigQuery entries
   * ("@bigquery") and Pub/Sub topics ("@pubsub"). Users create their own entry
   * group to contain Cloud Storage fileset entries or custom type entries,
   * and the IAM policies associated with those entries. Entry groups, like
   * entries, can be searched.
   *
   * A maximum of 10,000 entry groups may be created per organization across all
   * locations.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project this entry group is in. Example:
   *
   *   * projects/{project_id}/locations/{location}
   *
   *   Note that this EntryGroup and its child resources may not actually be
   *   stored in the location in this name.
   * @param {string} request.entryGroupId
   *   Required. The id of the entry group to create.
   *   The id must begin with a letter or underscore, contain only English
   *   letters, numbers and underscores, and be at most 64 characters.
   * @param {google.cloud.datacatalog.v1beta1.EntryGroup} request.entryGroup
   *   The entry group to create. Defaults to an empty entry group.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
          | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createEntryGroup(request, options, callback);
  }
  updateEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an EntryGroup. The user should enable the Data Catalog API in the
   * project identified by the `entry_group.name` parameter (see [Data Catalog
   * Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more
   * information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.EntryGroup} request.entryGroup
   *   Required. The updated entry group. "name" field must be set.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update on the entry group. If absent or empty, all modifiable
   *   fields are updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
          | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'entry_group.name': request.entryGroup!.name || '',
    });
    return this._innerApiCalls.updateEntryGroup(request, options, callback);
  }
  getEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets an EntryGroup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the entry group. For example,
   *   `projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.
   * @param {google.protobuf.FieldMask} request.readMask
   *   The fields to return. If not set or empty, all fields are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
          | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getEntryGroup(request, options, callback);
  }
  deleteEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an EntryGroup. Only entry groups that do not contain entries can be
   * deleted. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the entry group. For example,
   *   `projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.
   * @param {boolean} [request.force]
   *   Optional. If true, deletes all entries in the entry group.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteEntryGroup(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteEntryGroup(request, options, callback);
  }
  createEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates an entry. Only entries of 'FILESET' type or user-specified type can
   * be created.
   *
   * Users should enable the Data Catalog API in the project identified by
   * the `parent` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * A maximum of 100,000 entries may be created per entry group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the entry group this entry is in. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   *
   *   Note that this Entry and its child resources may not actually be stored in
   *   the location in this name.
   * @param {string} request.entryId
   *   Required. The id of the entry to create.
   * @param {google.cloud.datacatalog.v1beta1.Entry} request.entry
   *   Required. The entry to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Entry]{@link google.cloud.datacatalog.v1beta1.Entry}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
          | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createEntry(request, options, callback);
  }
  updateEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an existing entry.
   * Users should enable the Data Catalog API in the project identified by
   * the `entry.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.Entry} request.entry
   *   Required. The updated entry. The "name" field must be set.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update on the entry. If absent or empty, all modifiable
   *   fields are updated.
   *
   *   The following fields are modifiable:
   *   * For entries with type `DATA_STREAM`:
   *      * `schema`
   *   * For entries with type `FILESET`
   *      * `schema`
   *      * `display_name`
   *      * `description`
   *      * `gcs_fileset_spec`
   *      * `gcs_fileset_spec.file_patterns`
   *   * For entries with `user_specified_type`
   *      * `schema`
   *      * `display_name`
   *      * `description`
   *      * user_specified_type
   *      * user_specified_system
   *      * linked_resource
   *      * source_system_timestamps
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Entry]{@link google.cloud.datacatalog.v1beta1.Entry}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
          | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'entry.name': request.entry!.name || '',
    });
    return this._innerApiCalls.updateEntry(request, options, callback);
  }
  deleteEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an existing entry. Only entries created through
   * [CreateEntry][google.cloud.datacatalog.v1beta1.DataCatalog.CreateEntry]
   * method can be deleted.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the entry. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteEntry(request, options, callback);
  }
  getEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest | undefined,
      {} | undefined
    ]
  >;
  getEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets an entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the entry. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Entry]{@link google.cloud.datacatalog.v1beta1.Entry}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
          | protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getEntry(request, options, callback);
  }
  lookupEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  lookupEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Get an entry by target resource name. This method allows clients to use
   * the resource name from the source Google Cloud Platform service to get the
   * Data Catalog Entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.linkedResource
   *   The full name of the Google Cloud Platform resource the Data Catalog
   *   entry represents. See:
   *   https://cloud.google.com/apis/design/resource_names#full_resource_name.
   *   Full names are case-sensitive.
   *
   *   Examples:
   *
   *    * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
   *    * //pubsub.googleapis.com/projects/projectId/topics/topicId
   * @param {string} request.sqlResource
   *   The SQL name of the entry. SQL names are case-sensitive.
   *
   *   Examples:
   *
   *     * `cloud_pubsub.project_id.topic_id`
   *     * ``pubsub.project_id.`topic.id.with.dots` ``
   *     * `bigquery.table.project_id.dataset_id.table_id`
   *     * `bigquery.dataset.project_id.dataset_id`
   *     * `datacatalog.entry.project_id.location_id.entry_group_id.entry_id`
   *
   *   `*_id`s shoud satisfy the standard SQL rules for identifiers.
   *   https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Entry]{@link google.cloud.datacatalog.v1beta1.Entry}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  lookupEntry(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
          | protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      | protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.lookupEntry(request, options, callback);
  }
  createTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a tag template. The user should enable the Data Catalog API in
   * the project identified by the `parent` parameter (see [Data Catalog
   * Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more
   * information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and the template location
   *   [region](https://cloud.google.com/compute/docs/regions-zones/#available).
   *   NOTE: Currently, only the `us-central1 region` is supported.
   *
   *   Example:
   *
   *   * projects/{project_id}/locations/us-central1
   * @param {string} request.tagTemplateId
   *   Required. The id of the tag template to create.
   * @param {google.cloud.datacatalog.v1beta1.TagTemplate} request.tagTemplate
   *   Required. The tag template to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplate]{@link google.cloud.datacatalog.v1beta1.TagTemplate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
          | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createTagTemplate(request, options, callback);
  }
  getTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets a tag template.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag template. Example:
   *
   *   * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplate]{@link google.cloud.datacatalog.v1beta1.TagTemplate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
          | protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getTagTemplate(request, options, callback);
  }
  updateTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates a tag template. This method cannot be used to update the fields of
   * a template. The tag template fields are represented as separate resources
   * and should be updated using their own create/update/delete methods.
   * Users should enable the Data Catalog API in the project identified by
   * the `tag_template.name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.TagTemplate} request.tagTemplate
   *   Required. The template to update. The "name" field must be set.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The field mask specifies the parts of the template to overwrite.
   *
   *   Allowed fields:
   *
   *     * `display_name`
   *
   *   If absent or empty, all of the allowed fields above will be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplate]{@link google.cloud.datacatalog.v1beta1.TagTemplate}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
          | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplate,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'tag_template.name': request.tagTemplate!.name || '',
    });
    return this._innerApiCalls.updateTagTemplate(request, options, callback);
  }
  deleteTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes a tag template and all tags using the template.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag template to delete. Example:
   *
   *   * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}
   * @param {boolean} request.force
   *   Required. Currently, this field must always be set to `true`.
   *   This confirms the deletion of any possible tags using this template.
   *   `force = false` will be supported in the future.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTagTemplate(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteTagTemplate(request, options, callback);
  }
  createTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `parent` parameter (see
   * [Data Catalog Resource
   * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more
   * information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and the template location
   *   [region](https://cloud.google.com/compute/docs/regions-zones/#available).
   *   NOTE: Currently, only the `us-central1 region` is supported.
   *
   *   Example:
   *
   *   * projects/{project_id}/locations/us-central1/tagTemplates/{tag_template_id}
   * @param {string} request.tagTemplateFieldId
   *   Required. The ID of the tag template field to create.
   *   Field ids can contain letters (both uppercase and lowercase), numbers
   *   (0-9), underscores (_) and dashes (-). Field IDs must be at least 1
   *   character long and at most 128 characters long. Field IDs must also be
   *   unique within their template.
   * @param {google.cloud.datacatalog.v1beta1.TagTemplateField} request.tagTemplateField
   *   Required. The tag template field to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplateField]{@link google.cloud.datacatalog.v1beta1.TagTemplateField}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
          | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createTagTemplateField(
      request,
      options,
      callback
    );
  }
  updateTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates a field in a tag template. This method cannot be used to update the
   * field type. Users should enable the Data Catalog API in the project
   * identified by the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag template field. Example:
   *
   *   * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   * @param {google.cloud.datacatalog.v1beta1.TagTemplateField} request.tagTemplateField
   *   Required. The template to update.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. The field mask specifies the parts of the template to be updated.
   *   Allowed fields:
   *
   *     * `display_name`
   *     * `type.enum_type`
   *     * `is_required`
   *
   *   If `update_mask` is not set or empty, all of the allowed fields above will
   *   be updated.
   *
   *   When updating an enum type, the provided values will be merged with the
   *   existing values. Therefore, enum values can only be added, existing enum
   *   values cannot be deleted nor renamed. Updating a template field from
   *   optional to required is NOT allowed.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplateField]{@link google.cloud.datacatalog.v1beta1.TagTemplateField}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
          | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.updateTagTemplateField(
      request,
      options,
      callback
    );
  }
  renameTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  renameTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Renames a field in a tag template. The user should enable the Data Catalog
   * API in the project identified by the `name` parameter (see [Data Catalog
   * Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more
   * information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag template. Example:
   *
   *   * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   * @param {string} request.newTagTemplateFieldId
   *   Required. The new ID of this tag template field. For example,
   *   `my_new_field`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagTemplateField]{@link google.cloud.datacatalog.v1beta1.TagTemplateField}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  renameTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
          | protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      | protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITagTemplateField,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.renameTagTemplateField(
      request,
      options,
      callback
    );
  }
  deleteTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes a field in a tag template and all uses of that field.
   * Users should enable the Data Catalog API in the project identified by
   * the `name` parameter (see [Data Catalog Resource Project]
   * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag template field to delete. Example:
   *
   *   * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}
   * @param {boolean} request.force
   *   Required. Currently, this field must always be set to `true`.
   *   This confirms the deletion of this field from any tags using this field.
   *   `force = false` will be supported in the future.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTagTemplateField(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteTagTemplateField(
      request,
      options,
      callback
    );
  }
  createTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a tag on an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   * Note: The project identified by the `parent` parameter for the
   * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)
   * and the
   * [tag
   * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)
   * used to create the tag must be from the same organization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the resource to attach this tag to. Tags can be
   *   attached to Entries. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   *
   *   Note that this Tag and its child resources may not actually be stored in
   *   the location in this name.
   * @param {google.cloud.datacatalog.v1beta1.Tag} request.tag
   *   Required. The tag to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.cloud.datacatalog.v1beta1.Tag}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITag,
          | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createTag(request, options, callback);
  }
  updateTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an existing tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.Tag} request.tag
   *   Required. The updated tag. The "name" field must be set.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update on the Tag. If absent or empty, all modifiable fields
   *   are updated. Currently the only modifiable field is the field `fields`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.cloud.datacatalog.v1beta1.Tag}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITag,
          | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'tag.name': request.tag!.name || '',
    });
    return this._innerApiCalls.updateTag(request, options, callback);
  }
  deleteTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the tag to delete. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTag(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteTag(request, options, callback);
  }
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Sets the access control policy for a resource. Replaces any existing
   * policy.
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Cloud
   * Pub/Sub and any external Google Cloud Platform resources synced to Cloud
   * Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag
   *     templates.
   *   - `datacatalog.entries.setIamPolicy` to set policies on entries.
   *   - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protosTypes.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.IPolicy,
          protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.setIamPolicy(request, options, callback);
  }
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the access control policy for a resource. A `NOT_FOUND` error
   * is returned if the resource does not exist. An empty policy is returned
   * if the resource exists but does not have a policy set on it.
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Cloud
   * Pub/Sub and any external Google Cloud Platform resources synced to Cloud
   * Data Catalog.
   *
   * Callers must have following Google IAM permission
   *   - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag
   *     templates.
   *   - `datacatalog.entries.getIamPolicy` to get policies on entries.
   *   - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protosTypes.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.IPolicy,
          protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.IPolicy,
      protosTypes.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.getIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of permissions is returned
   * (We don't return a `NOT_FOUND` error).
   *
   * Supported resources are:
   *   - Tag templates.
   *   - Entries.
   *   - Entry groups.
   * Note, this method cannot be used to manage policies for BigQuery, Cloud
   * Pub/Sub and any external Google Cloud Platform resources synced to Cloud
   * Data Catalog.
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protosTypes.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.iam.v1.ITestIamPermissionsResponse,
          protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.iam.v1.ITestIamPermissionsResponse,
      protosTypes.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    return this._innerApiCalls.testIamPermissions(request, options, callback);
  }

  searchCatalog(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[],
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResponse
    ]
  >;
  searchCatalog(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[],
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResponse
    >
  ): void;
  /**
   * Searches Data Catalog for multiple resources like entries, tags that
   * match a query.
   *
   * This is a custom method
   * (https://cloud.google.com/apis/design/custom_methods) and does not return
   * the complete resource, only the resource identifier and high level
   * fields. Clients can subsequentally call `Get` methods.
   *
   * Note that Data Catalog search queries do not guarantee full recall. Query
   * results that match your query may not be returned, even in subsequent
   * result pages. Also note that results returned (and not returned) can vary
   * across repeated search queries.
   *
   * See [Data Catalog Search
   * Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.SearchCatalogRequest.Scope} request.scope
   *   Required. The scope of this search request.
   * @param {string} request.query
   *   Required. The query string in search query syntax. The query must be
   *   non-empty.
   *
   *   Query strings can be simple as "x" or more qualified as:
   *
   *   * name:x
   *   * column:x
   *   * description:y
   *
   *   Note: Query tokens need to have a minimum of 3 characters for substring
   *   matching to work correctly. See [Data Catalog Search
   *   Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.
   * @param {number} request.pageSize
   *   Number of results in the search page. If <=0 then defaults to 10. Max limit
   *   for page_size is 1000. Throws an invalid argument for page_size > 1000.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token returned in an earlier
   *   [SearchCatalogResponse.next_page_token][google.cloud.datacatalog.v1beta1.SearchCatalogResponse.next_page_token],
   *   which indicates that this is a continuation of a prior
   *   [SearchCatalogRequest][google.cloud.datacatalog.v1beta1.DataCatalog.SearchCatalog]
   *   call, and that the system should return the next page of data. If empty,
   *   the first page is returned.
   * @param {string} request.orderBy
   *   Specifies the ordering of results, currently supported case-sensitive
   *   choices are:
   *
   *     * `relevance`, only supports descending
   *     * `last_modified_timestamp [asc|desc]`, defaults to descending if not
   *       specified
   *
   *   If not specified, defaults to `relevance` descending.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [SearchCatalogResult]{@link google.cloud.datacatalog.v1beta1.SearchCatalogResult}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [SearchCatalogResult]{@link google.cloud.datacatalog.v1beta1.SearchCatalogResult} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [SearchCatalogRequest]{@link google.cloud.datacatalog.v1beta1.SearchCatalogRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [SearchCatalogResponse]{@link google.cloud.datacatalog.v1beta1.SearchCatalogResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchCatalog(
    request: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[],
          protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest | null,
          protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[],
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[],
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.searchCatalog(request, options, callback);
  }

  /**
   * Equivalent to {@link searchCatalog}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link searchCatalog} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1beta1.SearchCatalogRequest.Scope} request.scope
   *   Required. The scope of this search request.
   * @param {string} request.query
   *   Required. The query string in search query syntax. The query must be
   *   non-empty.
   *
   *   Query strings can be simple as "x" or more qualified as:
   *
   *   * name:x
   *   * column:x
   *   * description:y
   *
   *   Note: Query tokens need to have a minimum of 3 characters for substring
   *   matching to work correctly. See [Data Catalog Search
   *   Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.
   * @param {number} request.pageSize
   *   Number of results in the search page. If <=0 then defaults to 10. Max limit
   *   for page_size is 1000. Throws an invalid argument for page_size > 1000.
   * @param {string} [request.pageToken]
   *   Optional. Pagination token returned in an earlier
   *   [SearchCatalogResponse.next_page_token][google.cloud.datacatalog.v1beta1.SearchCatalogResponse.next_page_token],
   *   which indicates that this is a continuation of a prior
   *   [SearchCatalogRequest][google.cloud.datacatalog.v1beta1.DataCatalog.SearchCatalog]
   *   call, and that the system should return the next page of data. If empty,
   *   the first page is returned.
   * @param {string} request.orderBy
   *   Specifies the ordering of results, currently supported case-sensitive
   *   choices are:
   *
   *     * `relevance`, only supports descending
   *     * `last_modified_timestamp [asc|desc]`, defaults to descending if not
   *       specified
   *
   *   If not specified, defaults to `relevance` descending.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [SearchCatalogResult]{@link google.cloud.datacatalog.v1beta1.SearchCatalogResult} on 'data' event.
   */
  searchCatalogStream(
    request?: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.searchCatalog.createStream(
      this._innerApiCalls.searchCatalog as gax.GaxCall,
      request,
      callSettings
    );
  }
  listEntryGroups(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsResponse
    ]
  >;
  listEntryGroups(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsResponse
    >
  ): void;
  /**
   * Lists entry groups.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the location that contains the entry groups, which
   *   can be provided in URL format. Example:
   *
   *   * projects/{project_id}/locations/{location}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return. Default is 10. Max limit
   *   is 1000. Throws an invalid argument for `page_size > 1000`.
   * @param {string} [request.pageToken]
   *   Optional. Token that specifies which page is requested. If empty, the first
   *   page is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListEntryGroupsRequest]{@link google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListEntryGroupsResponse]{@link google.cloud.datacatalog.v1beta1.ListEntryGroupsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listEntryGroups(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup[],
          protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest | null,
          protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntryGroup[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listEntryGroups(request, options, callback);
  }

  /**
   * Equivalent to {@link listEntryGroups}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listEntryGroups} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the location that contains the entry groups, which
   *   can be provided in URL format. Example:
   *
   *   * projects/{project_id}/locations/{location}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return. Default is 10. Max limit
   *   is 1000. Throws an invalid argument for `page_size > 1000`.
   * @param {string} [request.pageToken]
   *   Optional. Token that specifies which page is requested. If empty, the first
   *   page is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [EntryGroup]{@link google.cloud.datacatalog.v1beta1.EntryGroup} on 'data' event.
   */
  listEntryGroupsStream(
    request?: protosTypes.google.cloud.datacatalog.v1beta1.IListEntryGroupsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listEntryGroups.createStream(
      this._innerApiCalls.listEntryGroups as gax.GaxCall,
      request,
      callSettings
    );
  }
  listEntries(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesResponse
    ]
  >;
  listEntries(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesResponse
    >
  ): void;
  /**
   * Lists entries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the entry group that contains the entries, which can
   *   be provided in URL format. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default is 10. Max limit is 1000.
   *   Throws an invalid argument for `page_size > 1000`.
   * @param {string} request.pageToken
   *   Token that specifies which page is requested. If empty, the first page is
   *   returned.
   * @param {google.protobuf.FieldMask} request.readMask
   *   The fields to return for each Entry. If not set or empty, all
   *   fields are returned.
   *   For example, setting read_mask to contain only one path "name" will cause
   *   ListEntries to return a list of Entries with only "name" field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Entry]{@link google.cloud.datacatalog.v1beta1.Entry}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Entry]{@link google.cloud.datacatalog.v1beta1.Entry} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListEntriesRequest]{@link google.cloud.datacatalog.v1beta1.ListEntriesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListEntriesResponse]{@link google.cloud.datacatalog.v1beta1.ListEntriesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listEntries(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.IEntry[],
          protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest | null,
          protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.IEntry[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listEntries(request, options, callback);
  }

  /**
   * Equivalent to {@link listEntries}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listEntries} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the entry group that contains the entries, which can
   *   be provided in URL format. Example:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   * @param {number} request.pageSize
   *   The maximum number of items to return. Default is 10. Max limit is 1000.
   *   Throws an invalid argument for `page_size > 1000`.
   * @param {string} request.pageToken
   *   Token that specifies which page is requested. If empty, the first page is
   *   returned.
   * @param {google.protobuf.FieldMask} request.readMask
   *   The fields to return for each Entry. If not set or empty, all
   *   fields are returned.
   *   For example, setting read_mask to contain only one path "name" will cause
   *   ListEntries to return a list of Entries with only "name" field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Entry]{@link google.cloud.datacatalog.v1beta1.Entry} on 'data' event.
   */
  listEntriesStream(
    request?: protosTypes.google.cloud.datacatalog.v1beta1.IListEntriesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listEntries.createStream(
      this._innerApiCalls.listEntries as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTags(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsResponse
    ]
  >;
  listTags(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsResponse
    >
  ): void;
  /**
   * Lists the tags on an [Entry][google.cloud.datacatalog.v1beta1.Entry].
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the Data Catalog resource to list the tags of. The
   *   resource could be an [Entry][google.cloud.datacatalog.v1beta1.Entry] or an
   *   [EntryGroup][google.cloud.datacatalog.v1beta1.EntryGroup].
   *
   *   Examples:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Default is 10. Max limit is 1000.
   * @param {string} request.pageToken
   *   Token that specifies which page is requested. If empty, the first page is
   *   returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Tag]{@link google.cloud.datacatalog.v1beta1.Tag}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Tag]{@link google.cloud.datacatalog.v1beta1.Tag} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTagsRequest]{@link google.cloud.datacatalog.v1beta1.ListTagsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTagsResponse]{@link google.cloud.datacatalog.v1beta1.ListTagsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTags(
    request: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.datacatalog.v1beta1.ITag[],
          protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest | null,
          protosTypes.google.cloud.datacatalog.v1beta1.IListTagsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.datacatalog.v1beta1.ITag[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.datacatalog.v1beta1.ITag[],
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest | null,
      protosTypes.google.cloud.datacatalog.v1beta1.IListTagsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listTags(request, options, callback);
  }

  /**
   * Equivalent to {@link listTags}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTags} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the Data Catalog resource to list the tags of. The
   *   resource could be an [Entry][google.cloud.datacatalog.v1beta1.Entry] or an
   *   [EntryGroup][google.cloud.datacatalog.v1beta1.EntryGroup].
   *
   *   Examples:
   *
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}
   *   * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Default is 10. Max limit is 1000.
   * @param {string} request.pageToken
   *   Token that specifies which page is requested. If empty, the first page is
   *   returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Tag]{@link google.cloud.datacatalog.v1beta1.Tag} on 'data' event.
   */
  listTagsStream(
    request?: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listTags.createStream(
      this._innerApiCalls.listTags as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified entry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @returns {string} Resource name string.
   */
  entryPath(
    project: string,
    location: string,
    entryGroup: string,
    entry: string
  ) {
    return this._pathTemplates.entryPathTemplate.render({
      project,
      location,
      entry_group: entryGroup,
      entry,
    });
  }

  /**
   * Parse the project from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryName(entryName: string) {
    return this._pathTemplates.entryPathTemplate.match(entryName).project;
  }

  /**
   * Parse the location from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryName(entryName: string) {
    return this._pathTemplates.entryPathTemplate.match(entryName).location;
  }

  /**
   * Parse the entry_group from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryName(entryName: string) {
    return this._pathTemplates.entryPathTemplate.match(entryName).entry_group;
  }

  /**
   * Parse the entry from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromEntryName(entryName: string) {
    return this._pathTemplates.entryPathTemplate.match(entryName).entry;
  }

  /**
   * Return a fully-qualified entryGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @returns {string} Resource name string.
   */
  entryGroupPath(project: string, location: string, entryGroup: string) {
    return this._pathTemplates.entryGroupPathTemplate.render({
      project,
      location,
      entry_group: entryGroup,
    });
  }

  /**
   * Parse the project from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryGroupName(entryGroupName: string) {
    return this._pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .project;
  }

  /**
   * Parse the location from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryGroupName(entryGroupName: string) {
    return this._pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .location;
  }

  /**
   * Parse the entry_group from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryGroupName(entryGroupName: string) {
    return this._pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .entry_group;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this._pathTemplates.locationPathTemplate.render({
      project,
      location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName)
      .location;
  }

  /**
   * Return a fully-qualified policyTag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} taxonomy
   * @param {string} policy_tag
   * @returns {string} Resource name string.
   */
  policyTagPath(
    project: string,
    location: string,
    taxonomy: string,
    policyTag: string
  ) {
    return this._pathTemplates.policyTagPathTemplate.render({
      project,
      location,
      taxonomy,
      policy_tag: policyTag,
    });
  }

  /**
   * Parse the project from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPolicyTagName(policyTagName: string) {
    return this._pathTemplates.policyTagPathTemplate.match(policyTagName)
      .project;
  }

  /**
   * Parse the location from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPolicyTagName(policyTagName: string) {
    return this._pathTemplates.policyTagPathTemplate.match(policyTagName)
      .location;
  }

  /**
   * Parse the taxonomy from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the taxonomy.
   */
  matchTaxonomyFromPolicyTagName(policyTagName: string) {
    return this._pathTemplates.policyTagPathTemplate.match(policyTagName)
      .taxonomy;
  }

  /**
   * Parse the policy_tag from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the policy_tag.
   */
  matchPolicyTagFromPolicyTagName(policyTagName: string) {
    return this._pathTemplates.policyTagPathTemplate.match(policyTagName)
      .policy_tag;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this._pathTemplates.projectPathTemplate.render({
      project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this._pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified tag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @param {string} tag
   * @returns {string} Resource name string.
   */
  tagPath(
    project: string,
    location: string,
    entryGroup: string,
    entry: string,
    tag: string
  ) {
    return this._pathTemplates.tagPathTemplate.render({
      project,
      location,
      entry_group: entryGroup,
      entry,
      tag,
    });
  }

  /**
   * Parse the project from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).project;
  }

  /**
   * Parse the location from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).location;
  }

  /**
   * Parse the entry_group from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).entry_group;
  }

  /**
   * Parse the entry from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).entry;
  }

  /**
   * Parse the tag from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the tag.
   */
  matchTagFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).tag;
  }

  /**
   * Return a fully-qualified tagTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tag_template
   * @returns {string} Resource name string.
   */
  tagTemplatePath(project: string, location: string, tagTemplate: string) {
    return this._pathTemplates.tagTemplatePathTemplate.render({
      project,
      location,
      tag_template: tagTemplate,
    });
  }

  /**
   * Parse the project from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagTemplateName(tagTemplateName: string) {
    return this._pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .project;
  }

  /**
   * Parse the location from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagTemplateName(tagTemplateName: string) {
    return this._pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .location;
  }

  /**
   * Parse the tag_template from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the tag_template.
   */
  matchTagTemplateFromTagTemplateName(tagTemplateName: string) {
    return this._pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .tag_template;
  }

  /**
   * Return a fully-qualified tagTemplateField resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tag_template
   * @param {string} field
   * @returns {string} Resource name string.
   */
  tagTemplateFieldPath(
    project: string,
    location: string,
    tagTemplate: string,
    field: string
  ) {
    return this._pathTemplates.tagTemplateFieldPathTemplate.render({
      project,
      location,
      tag_template: tagTemplate,
      field,
    });
  }

  /**
   * Parse the project from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this._pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).project;
  }

  /**
   * Parse the location from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this._pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).location;
  }

  /**
   * Parse the tag_template from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the tag_template.
   */
  matchTagTemplateFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this._pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).tag_template;
  }

  /**
   * Parse the field from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the field.
   */
  matchFieldFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this._pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).field;
  }

  /**
   * Return a fully-qualified taxonomy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} taxonomy
   * @returns {string} Resource name string.
   */
  taxonomyPath(project: string, location: string, taxonomy: string) {
    return this._pathTemplates.taxonomyPathTemplate.render({
      project,
      location,
      taxonomy,
    });
  }

  /**
   * Parse the project from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaxonomyName(taxonomyName: string) {
    return this._pathTemplates.taxonomyPathTemplate.match(taxonomyName).project;
  }

  /**
   * Parse the location from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaxonomyName(taxonomyName: string) {
    return this._pathTemplates.taxonomyPathTemplate.match(taxonomyName)
      .location;
  }

  /**
   * Parse the taxonomy from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the taxonomy.
   */
  matchTaxonomyFromTaxonomyName(taxonomyName: string) {
    return this._pathTemplates.taxonomyPathTemplate.match(taxonomyName)
      .taxonomy;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.dataCatalogStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
