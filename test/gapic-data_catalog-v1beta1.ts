// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import {describe, it} from 'mocha';
const datacatalogModule = require('../src');

const FAKE_STATUS_CODE = 1;
class FakeError {
  name: string;
  message: string;
  code: number;
  constructor(n: number) {
    this.name = 'fakeName';
    this.message = 'fake message';
    this.code = n;
  }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError | null, response?: {} | null): void;
}

export class Operation {
  constructor() {}
  promise() {}
}
function mockSimpleGrpcMethod(
  expectedRequest: {},
  response: {} | null,
  error: FakeError | null
) {
  return (actualRequest: {}, options: {}, callback: Callback) => {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}
describe('v1beta1.DataCatalogClient', () => {
  it('has servicePath', () => {
    const servicePath = datacatalogModule.v1beta1.DataCatalogClient.servicePath;
    assert(servicePath);
  });
  it('has apiEndpoint', () => {
    const apiEndpoint = datacatalogModule.v1beta1.DataCatalogClient.apiEndpoint;
    assert(apiEndpoint);
  });
  it('has port', () => {
    const port = datacatalogModule.v1beta1.DataCatalogClient.port;
    assert(port);
    assert(typeof port === 'number');
  });
  it('should create a client with no option', () => {
    const client = new datacatalogModule.v1beta1.DataCatalogClient();
    assert(client);
  });
  it('should create a client with gRPC fallback', () => {
    const client = new datacatalogModule.v1beta1.DataCatalogClient({
      fallback: true,
    });
    assert(client);
  });
  describe('createEntryGroup', () => {
    it('invokes createEntryGroup without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createEntryGroup = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createEntryGroup(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createEntryGroup with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createEntryGroup = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createEntryGroup(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getEntryGroup', () => {
    it('invokes getEntryGroup without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getEntryGroup = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getEntryGroup(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getEntryGroup with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getEntryGroup = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getEntryGroup(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteEntryGroup', () => {
    it('invokes deleteEntryGroup without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteEntryGroup = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteEntryGroup(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteEntryGroup with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryGroupRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteEntryGroup = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteEntryGroup(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createEntry', () => {
    it('invokes createEntry without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createEntry = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createEntry(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createEntry with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createEntry = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createEntry(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateEntry', () => {
    it('invokes updateEntry without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest = {};
      request.entry = {};
      request.entry.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateEntry = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateEntry(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateEntry with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateEntryRequest = {};
      request.entry = {};
      request.entry.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateEntry = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateEntry(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteEntry', () => {
    it('invokes deleteEntry without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteEntry = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteEntry(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteEntry with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteEntry = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteEntry(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getEntry', () => {
    it('invokes getEntry without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getEntry = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getEntry(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getEntry with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getEntry = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getEntry(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('lookupEntry', () => {
    it('invokes lookupEntry without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.lookupEntry = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.lookupEntry(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes lookupEntry with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ILookupEntryRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.lookupEntry = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.lookupEntry(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createTagTemplate', () => {
    it('invokes createTagTemplate without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTagTemplate = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createTagTemplate(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createTagTemplate with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTagTemplate = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createTagTemplate(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getTagTemplate', () => {
    it('invokes getTagTemplate without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getTagTemplate = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getTagTemplate(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getTagTemplate with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IGetTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getTagTemplate = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getTagTemplate(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateTagTemplate', () => {
    it('invokes updateTagTemplate without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest = {};
      request.tagTemplate = {};
      request.tagTemplate.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTagTemplate = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateTagTemplate(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateTagTemplate with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateRequest = {};
      request.tagTemplate = {};
      request.tagTemplate.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTagTemplate = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateTagTemplate(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteTagTemplate', () => {
    it('invokes deleteTagTemplate without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTagTemplate = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteTagTemplate(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteTagTemplate with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTagTemplate = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteTagTemplate(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createTagTemplateField', () => {
    it('invokes createTagTemplateField without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTagTemplateField = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createTagTemplateField(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createTagTemplateField with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTagTemplateField = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createTagTemplateField(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateTagTemplateField', () => {
    it('invokes updateTagTemplateField without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTagTemplateField = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateTagTemplateField(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateTagTemplateField with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTagTemplateField = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateTagTemplateField(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('renameTagTemplateField', () => {
    it('invokes renameTagTemplateField without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.renameTagTemplateField = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.renameTagTemplateField(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes renameTagTemplateField with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IRenameTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.renameTagTemplateField = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.renameTagTemplateField(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteTagTemplateField', () => {
    it('invokes deleteTagTemplateField without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTagTemplateField = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteTagTemplateField(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteTagTemplateField with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagTemplateFieldRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTagTemplateField = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteTagTemplateField(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createTag', () => {
    it('invokes createTag without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTag = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createTag(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createTag with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ICreateTagRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createTag = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createTag(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateTag', () => {
    it('invokes updateTag without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest = {};
      request.tag = {};
      request.tag.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTag = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateTag(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateTag with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IUpdateTagRequest = {};
      request.tag = {};
      request.tag.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateTag = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateTag(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteTag', () => {
    it('invokes deleteTag without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTag = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteTag(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteTag with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IDeleteTagRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteTag = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteTag(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.ISetIamPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setIamPolicy = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setIamPolicy(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setIamPolicy with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.ISetIamPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setIamPolicy = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setIamPolicy(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.IGetIamPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getIamPolicy = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getIamPolicy(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getIamPolicy with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.IGetIamPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getIamPolicy = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getIamPolicy(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.ITestIamPermissionsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.testIamPermissions = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.testIamPermissions(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes testIamPermissions with error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.iam.v1.ITestIamPermissionsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.testIamPermissions = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.testIamPermissions(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('searchCatalog', () => {
    it('invokes searchCatalog without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.searchCatalog = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.searchCatalog(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('searchCatalogStream', () => {
    it('invokes searchCatalogStream without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.ISearchCatalogRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.searchCatalog = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .searchCatalogStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(request);
    });
  });
  describe('listTags', () => {
    it('invokes listTags without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listTags = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listTags(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listTagsStream', () => {
    it('invokes listTagsStream without error', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.cloud.datacatalog.v1beta1.IListTagsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listTags = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listTagsStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(request);
    });
  });
});
